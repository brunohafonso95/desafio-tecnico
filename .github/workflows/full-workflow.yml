name: Deployment Workflow

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
        mongodb-version: [4.2]
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Use nodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn --frozen-lockfile

  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Use nodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Generate new release
        id: semantic-release
        uses: codfish/semantic-release-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: check for new release
        if: steps.semantic-release.outputs.new-release-published == 'false'
        run: |
          echo "::error ::There's no new release version."
          exit 1

  deploy:
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Setting heroku remote repo
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku git:remote -a sky-challenge-api

      - name: Deploy to heroku
        run: git push heroku master
        env:
          CI: true
